[{"pk": 4, "model": "sh.shclasses", "fields": {"comment": "List Applications", "lang": "python", "name": "ListApps", "field": "Application", "parents": [], "deps": [], "public": false}}, {"pk": 5, "model": "sh.shclasses", "fields": {"comment": "This application aims to implement some kind of REST (well, really a kind of) interface to the landscape", "lang": "python", "name": "ShCommand", "field": "Service", "parents": [], "deps": [6], "public": false}}, {"pk": 6, "model": "sh.shclasses", "fields": {"comment": "Read POST &  GET data and make it available in an unified way", "lang": "python", "name": "HTTPRequest", "field": "Network", "parents": [], "deps": [], "public": false}}, {"pk": 7, "model": "sh.shclasses", "fields": {"comment": "Post things on HTTP, takes number of fields as GET'n'] arguments", "lang": "python", "name": "Post", "field": "Application", "parents": [], "deps": [6], "public": false}}, {"pk": 12, "model": "sh.shclasses", "fields": {"comment": "", "lang": "js", "name": "XHR", "field": "Network", "parents": [], "deps": [], "public": false}}, {"pk": 13, "model": "sh.shclasses", "fields": {"comment": "", "lang": "python", "name": "JSLoader", "field": "Util", "parents": [], "deps": [], "public": false}}, {"pk": 14, "model": "sh.shclasses", "fields": {"comment": "", "lang": "js", "name": "Commander", "field": "Util", "parents": [], "deps": [12], "public": false}}, {"pk": 15, "model": "sh.shclasses", "fields": {"comment": "", "lang": "python", "name": "Workspace", "field": "Application", "parents": [], "deps": [13], "public": false}}, {"pk": 16, "model": "sh.shclasses", "fields": {"comment": "", "lang": "js", "name": "JQWidget", "field": "UiBase", "parents": [], "deps": [], "public": false}}, {"pk": 17, "model": "sh.shclasses", "fields": {"comment": "", "lang": "js", "name": "JQMethodWidget", "field": "UiBase", "parents": [], "deps": [16], "public": false}}, {"pk": 3, "model": "sh.shmethods", "fields": {"comment": "", "body": "htmlopen = r'<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html lang=\"en\" dir=\"ltr\" xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> <title>Lazy Landscape Shell</title> </head> <body>'\nhtmlClose = '</body></html>'\nstyle = r' <style> *{ border:none; padding:0; margin:0; } #wrapper{ width:90%; margin: 20px auto; } #page-title{ top:0; left:0; padding:12px; background-color:#000; color: #eee; font-family:sans-serif; } .app-box{ width: 300px; float:left; margin:12px; height:200px; } .app-title{ font-family:sans-serif; font-size:24pt; } .app-title a{ color:#f47; text-decoration:none; } .app-title-noexec a{ font-size:24pt; color:#a47; text-decoration:none; } .app-desc{ color:#aaa; font-style:italic; font-family:serif; font-size:12pt; } .app-noexec{ font-family:sans-serif; font-weight:bold; font-size:12pt; color:#000; } </style>'\ntitle = r' <h3 id=\"page-title\">Applications</h3> <div id=\"wrapper\"> '\n\nret = [htmlopen, style, title]\n\n\nfor c in ShClasses.objects.filter(lang='python').filter(field='Application'):\n    hasexec = False\n    for m in c.methods.all():\n        if m.name == 'app':\n            hasexec = True\n            break\n                \n    exec_warning = ''\n    if not hasexec:\n        exec_warning = '<div class=\"app-noexec\">This app lacks an \"app\" method.</div>'\n        \n    ret += r' <div class=\"app-box\"> <div class=\"app-title\"><a href=\"/Application/%s\">%s</a></div> <div class=\"app-desc\">%s</div> %s </div> ' % (c.name, c.name, c.comment, exec_warning)\n            \nret += '</div>'\nret += htmlClose\n\nresponse.write(''.join(ret))", "args": "", "name": "app", "cls": 4}}, {"pk": 4, "model": "sh.shmethods", "fields": {"comment": "", "body": "self._d = {}\r\nfor k in request.POST:\r\n    self._d[ k ] = request.POST[k]\r\n    \r\nfor k in request.GET:\r\n    self._d[ k ] = request.GET[k]", "args": "request", "name": "__init__", "cls": 6}}, {"pk": 5, "model": "sh.shmethods", "fields": {"comment": "", "body": "self.args = Network.HTTPRequest(request)\r\nself.parse()", "args": "", "name": "app", "cls": 5}}, {"pk": 6, "model": "sh.shmethods", "fields": {"comment": "", "body": "if self.args.has('command'):\r\n    if hasattr(self, self.args.command) and callable(getattr(self, self.args.command)):\r\n        getattr(self, self.args.command)()", "args": "", "name": "parse", "cls": 5}}, {"pk": 7, "model": "sh.shmethods", "fields": {"comment": "", "body": "tattr = attr\r\nif isinstance(attr, basestring):\r\n    tattr = [attr]\r\nfor i in tattr:\r\n    if  i not in self._d:\r\n        return False\r\nreturn True", "args": "attr", "name": "has", "cls": 6}}, {"pk": 8, "model": "sh.shmethods", "fields": {"comment": "", "body": "if not self.args.has(['field','name','lang']):\r\n    response.write(self.json.dumps({'error':'not enough args'}))\r\n    \r\ncls = ShClasses()\r\nfor i in ['field','name','comment','lang']:\r\n    if self.args.has(i):\r\n        setattr(cls, i, getattr(self.args, i))\r\n        \r\ncls.save()\r\nresponse.write('<h1>OK: %s.%s (%s) created</h1>%s'%(cls.field,cls.name,cls.lang,cls.comment))\r\n#response.write(self.json.dumps(cls))", "args": "", "name": "new_class", "cls": 5}}, {"pk": 9, "model": "sh.shmethods", "fields": {"comment": "", "body": "args = Network.HTTPRequest(request)\r\nif args.has(['app']):\r\n    app = args.app\r\n    ret = ['<form action=\"/app/'+app+'\" method=\"POST\">']\r\n    for a in args.all():\r\n        if a != 'app':\r\n            if getattr(args,a) == 't':\r\n                ret.append('<div>'+a+': <input type=\"text\" name=\"'+a+'\"/></div>')\r\n            else:\r\n                ret.append('<div>'+a+': <textarea name=\"'+a+'\"></textarea></div>')\r\n    ret.append('<input type=\"submit\" value=\"POST to %s\"/></form>'%(app))\r\n    response.write('\\n'.join(ret))", "args": "", "name": "app", "cls": 7}}, {"pk": 10, "model": "sh.shmethods", "fields": {"comment": "", "body": "return self._d.keys()", "args": "", "name": "all", "cls": 6}}, {"pk": 11, "model": "sh.shmethods", "fields": {"comment": "", "body": "if name in self._d:\r\n    return self._d[name]\r\nelse:\r\n    raise AttributeError('HTTPRequest.%s is not defined' % (name))", "args": "name", "name": "__getattr__", "cls": 6}}, {"pk": 12, "model": "sh.shmethods", "fields": {"comment": "", "body": "self.json = __import__('json', globals(), locals(), [], -1)", "args": "", "name": "__init__", "cls": 5}}, {"pk": 14, "model": "sh.shmethods", "fields": {"comment": "", "body": "this.xhr = new XMLHttpRequest();", "args": "", "name": "init", "cls": 12}}, {"pk": 15, "model": "sh.shmethods", "fields": {"comment": "", "body": "this.xhr.open(\"GET\", url, false);\r\nthis.xhr.send(null);", "args": "url", "name": "get", "cls": 12}}, {"pk": 16, "model": "sh.shmethods", "fields": {"comment": "", "body": "if(data != undefined)\r\nthis.xhr.data = data\r\nthis.xhr.addEventListener(\"load\", fn, false);\r\nreturn this;", "args": "fn, data", "name": "bind", "cls": 12}}, {"pk": 17, "model": "sh.shmethods", "fields": {"comment": "", "body": "this.xhr.open(\"POST\", url, false);\r\nthis.xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\nthis.xhr.send(this.aToD(data));", "args": "url, data", "name": "post", "cls": 12}}, {"pk": 18, "model": "sh.shmethods", "fields": {"comment": "", "body": "jstr = []\r\nfor i in jlist:\r\n    jstr.append('<script src=\"/get/%s/%s\" type=\"text/javascript\"></script>'%(i[0], i[1]))\r\n\r\nself.js = '\\n'.join(jstr)", "args": "jlist", "name": "__init__", "cls": 13}}, {"pk": 19, "model": "sh.shmethods", "fields": {"comment": "", "body": "var ret = ''\r\nfor(var n in a)\r\n{\r\n    if(n != undefined && a[n] != undefined)\r\n        ret += encodeURIComponent(n) + '=' + encodeURIComponent(a[n]) + '&';\r\n}\r\nreturn ret;", "args": "a", "name": "aToD", "cls": 12}}, {"pk": 20, "model": "sh.shmethods", "fields": {"comment": "Takes a selector for the 'source' container of  commands and a callback to process whatever comes back from a command", "body": "var eList = document.querySelectorAll(source);\r\nif(eList.length > 0)\r\n{\r\n    var cont = eList[0];\r\n    var csource = document.createElement(\"input\");\r\n    var submit = document.createElement(\"span\");\r\n    submit.textContent = 'command';\r\n    cont.appendChild(csource);\r\n    cont.appendChild(submit);\r\n    \r\n    submit.source = csource;\r\n    submit.xhr = Network.New('XHR');\r\n    submit.xhr.bind(callback);\r\n    submit.addEventListener('click', function(e)\r\n    {\r\n            var cstr = this.source.value.split(' ');\r\n            var data = {};\r\n            for(var i = 0; i < cstr.length; i++)\r\n            {\r\n                var p = cstr[i].split('=');\r\n                data[p[0]] = p[1];\r\n            }\r\n          this.xhr.post('/Service/ShCommand', data);\r\n    });\r\n    \r\n}\r\n", "args": "source, callback", "name": "attach", "cls": 14}}, {"pk": 21, "model": "sh.shmethods", "fields": {"comment": "", "body": "if not self.args.has(['field','name']):\r\n    response.write( self.json.dumps({'error':'not enough args'}))\r\n    \r\ntry:\r\n    cls = ShClasses.objects.get(field=self.args.field, name=self.args.name)\r\n    # list methods\r\n    ms = {}\r\n    for i in cls.methods.all():\r\n        ms[i.name] = {'id':i.id,'args':i.args, 'body':i.body, 'comment':i.comment}\r\n    o = {'id': cls.id,\r\n    'field': cls.field,\r\n    'name': cls.name,\r\n    'comment' : cls.comment,\r\n    'lang' : cls.lang,\r\n    'methods': ms,}\r\n    response.write( self.json.dumps(o))\r\nexcept:\r\n    response.write( self.json.dumps({'error':'Class does not exist for F(%s) N(%s)'%(self.args.field, self.args.name)}))\r\n    \r\n", "args": "", "name": "get_class", "cls": 5}}, {"pk": 22, "model": "sh.shmethods", "fields": {"comment": "", "body": "jscmd = Util.JSLoader([['Util', 'Commander'],['UiBase', 'JQMethodWidget']])\r\nscript = \"\"\"\r\n<script>\r\n\r\njQuery(document).ready(function(){\r\nvar cmd = Util.New('Commander');\r\ncmd.attach('#cont', function(t)\r\n{\r\n    var d = JSON.parse(this.responseText);\r\n    if(d.error != undefined)\r\n        alert(d.error);\r\n    else\r\n    {\r\n        var w = UiBase.New('JQWidget').create(' klass_'+d.id, d.field  + '.' + d.name +' <em>'+d.lang+'</em>');\r\n        for(var mn in d.methods)\r\n        {\r\n            var mcom = jQuery('<div class=\"method-link\">'+mn+'</div>');\r\n            w.viewport.append(mcom);\r\n            mcom.bind('click', {'mid': d.methods[mn].id, 'title': d.methods[mn].name} ,function(event){\r\n                UiBase.New('JQMethodWidget', event.data.mid, event.data.title);\r\n            });\r\n        }\r\n        \r\n    }\r\n})\r\n});\r\n</script>\r\n<style>\r\n*{\r\n        margin:0;\r\n        padding:0;\r\n        border:none;\r\n        font-family:sans-serif;\r\n        font-size:10pt;\r\n}\r\nbody{\r\n        background-color:#ddd;\r\n}\r\n\r\n#cont input{\r\n    width:400px;\r\n    margin-right:1em;\r\n}\r\n.method-edit{\r\nwidth:90%;\r\nheight:90%;\r\npadding:5%;\r\n}\r\n.widget{\r\n        border:1px solid #555;\r\n        background-color:#fff;\r\n        box-shadow: 5px 5px 5px #ccc;\r\n}\r\n.widget-title{\r\n        color:white;\r\n        background-color:#666;\r\n        border-bottom:1px solid #555;\r\n        padding:2px;\r\n}\r\n\r\n.ui-draggable-dragging .widget-title{\r\n        color:#555;\r\n        background-color:#eee;\r\n        cursor:move;\r\n}\r\n\r\n.ui-resizable-se{\r\n        position:absolute;\r\n        width:10px;\r\n        height:10px;\r\n        background-color:#555;\r\n        border-top:1px solid #555;\r\n        border-left:1px solid #555;\r\n        right:0;\r\n        bottom:0;\r\n}\r\n</style>\r\n\"\"\"\r\n\r\n\r\nself.os = ' <html> <head> <title>Workspace</title> <script src=\"http://localhost/~pierre/JQUERY/jquery.js\"></script> <script src=\"http://localhost/~pierre/JQUERY/jquery-ui.js\"></script> '+jscmd.js+' '+script+' </head> <body> <div id=\"cont\"> </div> </body></html>'", "args": "", "name": "__init__", "cls": 15}}, {"pk": 23, "model": "sh.shmethods", "fields": {"comment": "", "body": "response.write(self.os)", "args": "", "name": "app", "cls": 15}}, {"pk": 24, "model": "sh.shmethods", "fields": {"comment": "", "body": "var widget = jQuery('<div id=\"'+id+'\" class=\"widget\"></div>');\r\nvar title = jQuery('<div  class=\"widget-title\">'+title+'</div>');\r\nvar viewport = jQuery('<div  class=\"widget-viewport\"></div>');\r\n// var handle = jQuery('<div  class=\"widget-resize-handle\"></div>');\r\n\r\nwidget.append(title);\r\nwidget.append(viewport);\r\nviewport.css({ overflow: 'auto' });\r\nwidget.draggable({      \r\n                        addClasses:true,\r\n                        appendTo:\"parent\",\r\n                        axis:false,\r\n                        connectToSortable:false,\r\n                        containment:false,\r\n                        cursor:\"auto\",\r\n                        cursorAt:false,\r\n                        grid:false,\r\n                        handle:title,\r\n                        helper:\"original\",\r\n                        iframeFix:false,\r\n                        opacity:false,\r\n                        refreshPositions:false,\r\n                        revert:false,\r\n                        revertDuration:500,\r\n                        scope:\"default\",\r\n                        scroll:true,\r\n                        scrollSensitivity:20,\r\n                        scrollSpeed:20,\r\n                        snap:false,\r\n                        snapMode:\"both\",\r\n                        snapTolerance:20,\r\n                        stack:false,\r\n                        zIndex:0\r\n                });\r\nwidget.resizable({\r\n                alsoResize:viewport,\r\n                animate:false,\r\n              animateDuration:\"slow\",\r\n              animateEasing:\"swing\",\r\n              aspectRatio:false,\r\n              autoHide:false,\r\n              containment:false,\r\n              ghost:false,\r\n              grid:false,\r\n              handles:\"se\",\r\n              helper:false,\r\n              maxHeight:null,\r\n              maxWidth:null,\r\n              minHeight:10,\r\n              minWidth:10,\r\n              zIndex:1E3\r\n                });\r\n\r\nwidget.title = title;\r\nwidget.viewport = viewport;\r\nwidget.css('width','300px');\r\njQuery('body').append(widget);\r\nreturn widget;", "args": "id, title", "name": "create", "cls": 16}}, {"pk": 25, "model": "sh.shmethods", "fields": {"comment": "", "body": "if not self.args.has(['id']):\r\n    response.write( self.json.dumps({'error':'not enough args'}))\r\n\r\nsh = __import__('sh')\r\ncls = None\r\ntry:\r\n    cls = sh.models.ShMethods.objects.get(pk=self.args.id)\r\nexcept:\r\n    response.write( self.json.dumps({'error':'No method with ID %s'%(self.args.id,)}))\r\n    return\r\n    \r\no = {'id': cls.id,\r\n'name': cls.name,\r\n'comment' : cls.comment,\r\n'args' : cls.args,\r\n'body': cls.body,}\r\nresponse.write( self.json.dumps(o))\r\n", "args": "", "name": "get_method", "cls": 5}}, {"pk": 26, "model": "sh.shmethods", "fields": {"comment": "", "body": "this.base = UiBase.New('JQWidget').create('m_' + id, title);\r\nthis.code_widget = jQuery('<textarea class=method-edit name=\"nn\"></textarea>');\r\nthis.submit =  jQuery('<div class=\"submit\" type=\"submit\">save</div>');\r\n\r\nthis.base.viewport.append(this.code_widget);\r\nthis.base.viewport.append(this.submit);\r\n\r\nvar xhr = Network.New('XHR');\r\nvar data = {'command' : 'get_method', 'id': id};\r\nxhr.bind(this.handleMethod, {'widget':this});\r\nxhr.post('/Service/ShCommand', data);\r\n\r\nthis.submit.bind('click', {'mid':id, 'widget':this, 'callback' : this.handleMethod}, this.save_method);\r\n", "args": "id, title", "name": "init", "cls": 17}}, {"pk": 27, "model": "sh.shmethods", "fields": {"comment": "", "body": "var data = JSON.parse(this.responseText);\r\n\r\nif(data.error == undefined)\r\n{\r\n    var that = this.data.widget;\r\n    that.code_widget.val(data.body);\r\n    \r\n}\r\nelse\r\n    alert(data.error)", "args": "", "name": "handleMethod", "cls": 17}}, {"pk": 28, "model": "sh.shmethods", "fields": {"comment": "", "body": "var xhr = Network.New('XHR');\r\nvar data = {'command' : 'save_method', 'id': event.data.mid, 'body':event.data.widget.code_widget.val()};\r\nxhr.bind(event.data.widget.callback, {'widget':event.data.widget});\r\nxhr.post('/Service/ShCommand', data);", "args": "event", "name": "save_method", "cls": 17}}, {"pk": 29, "model": "sh.shmethods", "fields": {"comment": "", "body": "\r\nif not self.args.has(['id','body']):\r\n    response.write( self.json.dumps({'error':'not enough args'}))\r\n\r\nsh = __import__('sh')\r\ncls = None\r\ntry:\r\n    cls = sh.models.ShMethods.objects.get(pk=self.args.id)\r\nexcept:\r\n    response.write( self.json.dumps({'error':'No method with ID %s'%(self.args.id,)}))\r\n    return\r\n\r\ncls.body = self.args.body\r\ncls.save()\r\n    \r\no = {'id': cls.id,\r\n'name': cls.name,\r\n'comment' : cls.comment,\r\n'args' : cls.args,\r\n'body': cls.body,}\r\nresponse.write( self.json.dumps(o))\r\n\r\n", "args": "", "name": "save_method", "cls": 5}}]